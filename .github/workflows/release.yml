name: Release
permissions:
  packages: write
  contents: write
on:
  release:
    types: [published]
  workflow_run:
    workflows: ["Build"]
    branches: [main,master]
    types:
      - completed
  workflow_dispatch:

jobs:
  push_to_registry:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      # Checkout latest or specific tag
      - name: checkout
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        uses: actions/checkout@v3
      - name: checkout tag
        if: ${{ github.event.inputs.version != '' && github.event.inputs.version != 'latest' }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${{ github.event.inputs.version }}
          
      # Assign environment variables used in subsequent steps
      - name: Env variable assignment
        run: echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      # TAG_NAME defaults to 'latest' if not a release or manual deployment
      - name: Assign version
        run: |
          echo "TAG_NAME=latest" >> $GITHUB_ENV
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi;
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi;
          if [ ! -z "${{ secrets.APPSETTINGS_PATCH }}" ]; then
            echo "HAS_APPSETTINGS_PATCH=true" >> $GITHUB_ENV
          else
            echo "HAS_APPSETTINGS_PATCH=false" >> $GITHUB_ENV
          fi;
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
        
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'
          
      - name: Install x tool
        if: env.HAS_APPSETTINGS_PATCH == 'true'
        run: dotnet tool install -g x
          
      - name: Apply Production AppSettings
        if: env.HAS_APPSETTINGS_PATCH == 'true'
        working-directory: ./MyApp
        run: | 
          cat <<EOF >> appsettings.json.patch
          ${{ secrets.APPSETTINGS_PATCH }}
          EOF
          x patch appsettings.json.patch
      
      
      # Build and push new docker image
      - name: Build and push Docker image
        run: |
          dotnet publish --os linux --arch x64 -c Release -p:ContainerRepository=${{ env.image_repository_name }} -p:ContainerRegistry=ghcr.io -p:ContainerImageTags=${{ env.TAG_NAME }} -p:ContainerPort=80

  deploy:
    runs-on: ubuntu-latest
    needs: push_to_registry
    env:
      DOCKER_BUILDKIT: 1
      KAMAL_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      KAMAL_REGISTRY_USERNAME: ${{ github.actor }}
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundler-cache: true
      - run: gem install kamal
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}   
      - uses: docker/setup-buildx-action@v3
      - run: |
          kamal lock release
          kamal redeploy
